import java.util.LinkedList;

/*
THINGS TO UNDERSTAND FIRST

hashCode() : HashCode is a unique code generated by JVM whenever a new object gets created.
             the code will be different for different memory location in heap, it is guaranteed.
             we can get this HashCode using method hashCode(), which is a mehtod of Object class, 
             so hashCode method is available in every object we create in java.
             
<key, value> pair: node

hashmap ka funda for constant time complexity:

1. We store nodes in a array of linked list. Linked lists inside array are called buckets
   (size of array will be N, total no of nodes in hashmap is n)

So how will we insert and retrieve data in constant time ?

2. We create a hash function, which receives a key as parameter, and returns a value in constant time.
3. The value returned from hash function will be the bucket in which our node with key will be added 

put(key, value):
    get the bucket number (index) for the node (key) from hashFunction
    if node is already present in that bucket, update it with value
    else add that node in that bucket

remove(key): 
    get the bucket number (index) for key from hashFunction
    if key is present then just remove it from the linked list
    else return null

containsKey(key):
    get the bucket number (index) for key from hashFunction
    if key is present then return true;
    else return false;
  
get(key):
    get the bucket number (index) for key from hashFunction
    if key is present then return true;
    else return false;




*/

class HashMap<K, V> {
  private class HMNode {
    K key;
    V value;

    HMNode(K key, V value) {
      this.key = key;
      this.value = value;
    }
  }

  private int size;
  private LinkedList<HMNode>[] buckets;

  public HashMap() {
    initBuckets(4);
    size = 0;
  }

  private void initBuckets(int N) {
    buckets = new LinkedList[N];
    for (int bi = 0; bi < buckets.length; bi++) {
      buckets[bi] = new LinkedList<>();
    }
  }

  public void put(K key, V value) {
    int bi = hashFn(key);
    int di = getIndexWithinBucket(key, bi);

    if (di != -1) {
      HMNode node = buckets[bi].get(di);
      node.value = value;
    } else {
      buckets[bi].add(new HMNode(key, value));
      size++;
    }

    double lambda = size * 1.0 / buckets.length;
    if (lambda > 2.0) {
      rehash();
    }
  }

  private void rehash() {
    LinkedList<HMNode>[] oBucket = buckets;

    initBuckets(buckets.length * 2);
    size = 0;

    for (int i = 0; i < oBucket.length; i++) {
      for (HMNode node : oBucket[i]) {
        put(node.key, node.value);
      }
    }
  }

  public boolean containsKey(K key) {
    int bi = hashFn(key);
    int di = getIndexWithinBucket(key, bi);

    if (di != -1) {
      return true;
    } else {
      return false;
    }
  }

  public K remove(K key) {
    int bi = hashFn(key);
    int di = getIndexWithinBucket(key, bi);

    if (di != -1) {
      HMNode node = buckets[bi].remove(di);
      size--;
      return node.key;
    } else {
      return null;
    }
  }

  public int size() {
    return size;
  }

  public V get(K key) {
    int bi = hashFn(key);
    int di = getIndexWithinBucket(key, bi);

    if (di != -1) {
      HMNode node = buckets[bi].get(di);
      return node.value;
    } else {
      return null;
    }
  }

  private int getIndexWithinBucket(K key, int bi) {
    int di = 0;
    for (HMNode node : buckets[bi]) {
      if (node.key.equals(key)) {
        return di;
      }
      di++;
    }
    return -1;
  }

  private int hashFn(K key) {
    int hc = key.hashCode();
    return Math.abs(hc) % buckets.length;
  }

  public void display() {
    for (int i = 0; i < buckets.length; i++) {
      for (HMNode node : buckets[i]) {
        System.out.println(node.key + ": " + node.value);
      }
      System.out.println();
    }
  }
}

class Program {
  public static void main(String[] args) {
    HashMap<String, Integer> map = new HashMap<>();

    map.put("Shubham Fuloria", 10);
    map.put("Aditya", 20);
    map.put("Manisha Fuloria", 30);
    map.put("Vinita", 40);
    map.put("Urvashi", 50);
    map.put("Monika", 60);

    map.display();

    map.remove("Monika");

    map.display();
  }
}